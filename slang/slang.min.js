(() => { function a(a) { return a.querySelectorAll("script").forEach(a => { a.parentNode.insertBefore(document.createElement("script").appendChild(document.createTextNode(a.innerHTML)).parentNode, a), a.remove() }), a } function b(a) { for ([eventName, callback] of [["play", a => { a.target.classList.remove("error"), a.target.classList.remove("waiting"), a.target.classList.remove("ended"), a.target.classList.remove("pause"), a.target.classList.add("play") }], ["playing", a => { a.target.classList.remove("error"), a.target.classList.remove("waiting"), a.target.classList.remove("ended"), a.target.classList.remove("pause"), a.target.classList.add("play") }], ["pause", a => { a.target.classList.remove("play"), a.target.classList.add("pause") }], ["ended", a => { a.target.classList.remove("play"), a.target.classList.remove("pause"), a.target.classList.add("ended") }], ["waiting", a => { a.target.classList.remove("play"), a.target.classList.add("waiting") }], ["loadeddata", a => { a.target.classList.remove("waiting") }], ["error", a => { a.target.classList.remove("play"), a.target.classList.add("error") }]]) a.addEventListener(eventName, callback) } function c(a, b) { for (let c = 0; c < b.attributes.length; c++)a.setAttribute(b.attributes[c].name, b.attributes[c].value) } function d(a, b, c) { "eachDataRenderEnd" == a && (o--, !p[b.innerText] && (p[b.innerText] = c.cloneNode ? c.cloneNode(!0) : c)), "eachTemplateRenderEnd" == a && (o--, !p[b.innerText] && (p[b.innerText] = c.cloneNode ? c.cloneNode(!0) : c)), m[a].forEach(d => d(a, b, c)) } function e(a) { return a.split("_").reduce((a, b) => b.includes("w") ? a += `(min-width: ${b.slice(0, -1)}px)` : b.includes("h") ? a += `(min-height: ${b.slice(0, -1)}px)` : a += ` ${b.replace("or", ",")} `, "") } function f(a) { return a.attributes.length ? a.attributes[0].name.replace("?", "_or_").replace("!", "_and_") : "col" } function g(a) { return a.split("-").reduce((b, c, d) => (c += "", b || (b = ""), 0 == d && (b += `.${a}{${q.defs.struct[c]}}`), d % 2 ? b += ` @media ${e(c)}{.${a}{!mediaQueryStylesHere!}}` : b = b.replace("!mediaQueryStylesHere!", q.defs.struct[c]), b), "") } function h(a) { if (!a.length) return {}; const b = {}, c = document.createElement("div"); return r[a] ? c.innerHTML = r[a] : (r[a] = a.split(/(<\/template-(?:\w+)>)/g).map(a => a.replace(/[\r\n]/g, "")).filter((b, c, d) => d.indexOf(b) === c).join(""), c.innerHTML = r[a]), Array.prototype.forEach.call(c.children, a => b[a.localName.substring(a.localName.indexOf("-") + 1)] = a.cloneNode(!0)), b } function i(a) { slang.styles.classList.contains(a) || (slang.styles.node.innerHTML += g(a), slang.styles.classList.add(a)) } function j(b, c, d, e) { const f = b.cloneNode(); f.innerHTML = c; for (let a = f.querySelectorAll(q.selectorAll); a.length;)a.forEach(a => q.elements[a.localName]({ node: a, templates: d }, e)), a = f.querySelectorAll(q.selectorAll); return a(f) } function k(a) { return { writable: !1, value: a } } function l(a, b, c, d) { function e() { o || (s[a] = c, m.renderEnd.forEach(a => a({ eventName: "renderEnd", outputContainer: c }))) } function f() { o ? m.eachDataRenderEnd.unshift(e) : e() } if (!a.length) return c; if (s[a]) return m.renderEnd.forEach(a => a({ eventName: "renderEnd", outputContainer: c })), s[a]; const g = h(b); for (m.renderStart.forEach(a => a({ eventName: "renderStart", outputContainer: c, templates: g })); c.lastChild;)c.lastChild.remove(); return c.prepend(...j(c, a, g, d).childNodes), f(), c } window.slang = (a = "", b = "", c) => { const d = !!c; return c || (c = document.createElement("div")), l(a, b, c, d) }, Object.defineProperties(slang, function () { return { styles: k({ node: document.head.appendChild(document.createElement("style")), classList: document.createElement("null-node").classList }), subscribe: k((a, b) => { !m[a] || m[a].includes(b) || m[a].push(b) }), unsubscribe: k((a, b) => { m[a] && m[a].includes(b) && m[a].splice(m[a].indexOf(b), 1) }) } }()); const m = { renderStart: [], renderEnd: [], eachStructRenderStart: [], eachStructRenderEnd: [], eachTemplateRenderStart: [], eachTemplateRenderEnd: [], eachDataRenderStart: [], eachDataRenderEnd: [] }, n = { iframe(a) { const b = document.createElement("iframe"); d("eachDataRenderStart", a, b), c(b, a), b.setAttribute("loading", "lazy"), b.classList.add("loading"), b.addEventListener("load", () => { b.classList.remove("loading"), b.classList.add("loaded"), d("eachDataRenderEnd", a, b) }), a.replaceWith(b), b.src = a.innerText }, video(a, e) { const f = document.createElement("source"); f.setAttribute("src", a.innerText), f.setAttribute("type", e); const g = document.createElement("video"); d("eachDataRenderStart", a, g), c(g, a), b(g), g.setAttribute("loading", "lazy"), g.appendChild(f), d("eachDataRenderEnd", a, g), a.replaceWith(g) }, image(a, b) { const e = document.createElement("img"); d("eachDataRenderStart", a, e), c(e, a), e.setAttribute("loading", "lazy"), e.classList.add("loading"), e.addEventListener("load", () => { e.classList.remove("loading"), e.classList.add("loaded"), d("eachDataRenderEnd", a, e) }), e.setAttribute("type", b), e.setAttribute("src", a.innerText), a.replaceWith(e) }, audio(a, e) { const f = document.createElement("source"); f.setAttribute("src", a.innerText), f.setAttribute("type", e); const g = document.createElement("audio"); d("eachDataRenderStart", a, g), c(g, a), b(g), g.setAttribute("loading", "lazy"), g.appendChild(f), d("eachDataRenderEnd", a, g), a.replaceWith(g) }, async html(a) { d("eachDataRenderStart", a); const b = new Request(a.innerText), e = await fetch(b); if (!e.ok) return a.outerHTML = a.outerHTML.replace(a.localName, `${a.localName}-error`); const f = await e.text(), g = a.parentNode.cloneNode(); g.innerHTML = f, Array.prototype.forEach.call(g.children, b => c(b, a)), a.replaceWith(...g.childNodes), d("eachDataRenderEnd", a, g.childNodes) }, script(a, b) { const e = document.head.appendChild(document.createElement("script")); d("eachDataRenderStart", a, e), c(e, a), e.setAttribute("type", b), e.setAttribute("src", a.innerText), d("eachDataRenderEnd", a, e), a.remove() }, style(a, b, e) { const f = document.createElement("link"); e && document.head.appendChild(f), d("eachDataRenderStart", a, f), c(f, a), f.setAttribute("rel", "stylesheet"), f.setAttribute("href", a.innerText), d("eachDataRenderEnd", a, f), a.remove() } }; let o = 0; const p = {}, q = { defs: { struct: { row: "display:flex;flex-direction:row;", col: "display:flex;flex-direction:column;", wor: "display:flex;flex-direction:row-reverse;", loc: "display:flex;flex-direction:column-reverse;" }, data: { ogv: [n.video, "video/ogg"], webm: [n.video, "video/webm"], mp4: [n.video, "video/mp4"], png: [n.image, "image/png"], jpg: [n.image, "image/jpeg"], jpeg: [n.image, "image/jpeg"], ico: [n.image, "image/x-icon"], bmp: [n.image, "image/bmp"], gif: [n.image, "image/gif"], svg: [n.image, "image/svg+xml"], oga: [n.audio, "audio/ogg"], ogg: [n.audio, "audio/ogg"], mp3: [n.audio, "audio/mpeg"], html: [n.html, "text/html"], txt: [n.html, "text/html"], js: [n.script, "text/javascript"], css: [n.style, "text/css"] } }, elements: { template({ node: a, templates: b }) { if (!a.attributes.length || !b[a.attributes[0].name]) return console.error("Template not found: ", a), void (a.outerHTML = a.outerHTML.replace(a.localName, `${a.localName}-error`)); const c = b[a.attributes[0].name].cloneNode(!0); d("eachTemplateRenderStart", a, c), c.querySelectorAll("slot").forEach(b => b.outerHTML = (a => a ? a.innerHTML : b.outerHTML)(b.attributes.length ? a.content.querySelector(b.attributes[0].name) : null)), a.outerHTML = c.innerHTML, d("eachTemplateRenderEnd", a, c) }, struct({ node: a }) { let b; b = a.attributes[1] ? document.createElement(a.attributes[1].name) : document.createElement("div"), d("eachStructRenderStart", a, b), b.prepend(...a.childNodes); const c = f(a); b.classList.add("struct", c), i(c), d("eachStructRenderEnd", a, b), a.replaceWith(b) }, data({ node: a }, b) { o++, a.innerHTML = a.innerText.replace(/[ \n]/g, ""); let c = a.innerText.slice((Math.max(0, a.innerText.lastIndexOf(".")) || 1 / 0) + 1); q.defs.data[c] ? (a.classList.add("async", "file", `file--${c}`), q.defs.data[c][0](a, q.defs.data[c][1], b)) : n.iframe(a, "") } } }; q.selectorAll = `:is(${Object.keys(q.elements).join(", ")}):not(.async)`; const r = {}, s = {} })();
